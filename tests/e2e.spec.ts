// tests/e2e.spec.ts - REFACTORED
import { expect, test } from '@playwright/test';
import { stubThirdParties } from './sdkStubs';

test.describe('Anonymous User Flow', () => {
  test.beforeEach(async ({ page }) => {
    await stubThirdParties(page);
  });

  test('an anonymous user can complete a session and see their analytics', async ({ page }) => {
    await page.goto('/');

    // From the landing page, start a session
    await page.getByRole('button', { name: /Start For Free/i }).click();
    await page.waitForURL('/session');

    // Start and stop a short session
    await page.getByRole('button', { name: /Start Session/i }).click();

    // A mock transcript will be generated by the native browser speech recognition mock
    // We can add an assertion here if needed, but for now we just want to ensure the flow

    await page.getByRole('button', { name: /Stop Session/i }).click();

    // Expect to see the session ended dialog
    await expect(page.getByRole('heading', { name: 'Session Ended' })).toBeVisible();

    // The transcript from the session should be present
    const transcriptText = await page.locator('[data-testid="transcript-panel"]').innerText();
    expect(transcriptText).toContain('This is a mock transcript.');

    // Go to the analytics page
    await page.getByRole('button', { name: 'Go to Analytics' }).click();
    await page.waitForURL(/.*\/analytics\/.*/);

    // The analytics page should also show the same transcript
    const analyticsTranscriptText = await page.locator('[data-testid="transcript-panel-analytics"]').innerText();
    expect(analyticsTranscriptText).toContain('This is a mock transcript.');
  });
});
